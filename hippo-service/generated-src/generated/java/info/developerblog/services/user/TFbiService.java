/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package info.developerblog.services.user;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-26")
public class TFbiService {

  public interface Iface {

    public TFbiResponse fink(info.developerblog.services.auth.TAuthToken user, int hippoCount, int fee) throws info.developerblog.services.auth.TUnauthorizedException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void fink(info.developerblog.services.auth.TAuthToken user, int hippoCount, int fee, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TFbiResponse fink(info.developerblog.services.auth.TAuthToken user, int hippoCount, int fee) throws info.developerblog.services.auth.TUnauthorizedException, org.apache.thrift.TException
    {
      send_fink(user, hippoCount, fee);
      return recv_fink();
    }

    public void send_fink(info.developerblog.services.auth.TAuthToken user, int hippoCount, int fee) throws org.apache.thrift.TException
    {
      fink_args args = new fink_args();
      args.setUser(user);
      args.setHippoCount(hippoCount);
      args.setFee(fee);
      sendBase("fink", args);
    }

    public TFbiResponse recv_fink() throws info.developerblog.services.auth.TUnauthorizedException, org.apache.thrift.TException
    {
      fink_result result = new fink_result();
      receiveBase(result, "fink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fink failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void fink(info.developerblog.services.auth.TAuthToken user, int hippoCount, int fee, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fink_call method_call = new fink_call(user, hippoCount, fee, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private info.developerblog.services.auth.TAuthToken user;
      private int hippoCount;
      private int fee;
      public fink_call(info.developerblog.services.auth.TAuthToken user, int hippoCount, int fee, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.hippoCount = hippoCount;
        this.fee = fee;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fink_args args = new fink_args();
        args.setUser(user);
        args.setHippoCount(hippoCount);
        args.setFee(fee);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TFbiResponse getResult() throws info.developerblog.services.auth.TUnauthorizedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fink();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("fink", new fink());
      return processMap;
    }

    public static class fink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fink_args> {
      public fink() {
        super("fink");
      }

      public fink_args getEmptyArgsInstance() {
        return new fink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fink_result getResult(I iface, fink_args args) throws org.apache.thrift.TException {
        fink_result result = new fink_result();
        try {
          result.success = iface.fink(args.user, args.hippoCount, args.fee);
        } catch (info.developerblog.services.auth.TUnauthorizedException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("fink", new fink());
      return processMap;
    }

    public static class fink<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fink_args, TFbiResponse> {
      public fink() {
        super("fink");
      }

      public fink_args getEmptyArgsInstance() {
        return new fink_args();
      }

      public AsyncMethodCallback<TFbiResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TFbiResponse>() { 
          public void onComplete(TFbiResponse o) {
            fink_result result = new fink_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fink_result result = new fink_result();
            if (e instanceof info.developerblog.services.auth.TUnauthorizedException) {
                        result.ue = (info.developerblog.services.auth.TUnauthorizedException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fink_args args, org.apache.thrift.async.AsyncMethodCallback<TFbiResponse> resultHandler) throws TException {
        iface.fink(args.user, args.hippoCount, args.fee,resultHandler);
      }
    }

  }

  public static class fink_args implements org.apache.thrift.TBase<fink_args, fink_args._Fields>, java.io.Serializable, Cloneable, Comparable<fink_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fink_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HIPPO_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hippoCount", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fink_argsTupleSchemeFactory());
    }

    private info.developerblog.services.auth.TAuthToken user; // required
    private int hippoCount; // required
    private int fee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      HIPPO_COUNT((short)2, "hippoCount"),
      FEE((short)3, "fee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // HIPPO_COUNT
            return HIPPO_COUNT;
          case 3: // FEE
            return FEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HIPPOCOUNT_ISSET_ID = 0;
    private static final int __FEE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, info.developerblog.services.auth.TAuthToken.class)));
      tmpMap.put(_Fields.HIPPO_COUNT, new org.apache.thrift.meta_data.FieldMetaData("hippoCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fink_args.class, metaDataMap);
    }

    public fink_args() {
    }

    public fink_args(
      info.developerblog.services.auth.TAuthToken user,
      int hippoCount,
      int fee)
    {
      this();
      this.user = user;
      this.hippoCount = hippoCount;
      setHippoCountIsSet(true);
      this.fee = fee;
      setFeeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fink_args(fink_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUser()) {
        this.user = new info.developerblog.services.auth.TAuthToken(other.user);
      }
      this.hippoCount = other.hippoCount;
      this.fee = other.fee;
    }

    public fink_args deepCopy() {
      return new fink_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      setHippoCountIsSet(false);
      this.hippoCount = 0;
      setFeeIsSet(false);
      this.fee = 0;
    }

    public info.developerblog.services.auth.TAuthToken getUser() {
      return this.user;
    }

    public fink_args setUser(info.developerblog.services.auth.TAuthToken user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public int getHippoCount() {
      return this.hippoCount;
    }

    public fink_args setHippoCount(int hippoCount) {
      this.hippoCount = hippoCount;
      setHippoCountIsSet(true);
      return this;
    }

    public void unsetHippoCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIPPOCOUNT_ISSET_ID);
    }

    /** Returns true if field hippoCount is set (has been assigned a value) and false otherwise */
    public boolean isSetHippoCount() {
      return EncodingUtils.testBit(__isset_bitfield, __HIPPOCOUNT_ISSET_ID);
    }

    public void setHippoCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIPPOCOUNT_ISSET_ID, value);
    }

    public int getFee() {
      return this.fee;
    }

    public fink_args setFee(int fee) {
      this.fee = fee;
      setFeeIsSet(true);
      return this;
    }

    public void unsetFee() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEE_ISSET_ID);
    }

    /** Returns true if field fee is set (has been assigned a value) and false otherwise */
    public boolean isSetFee() {
      return EncodingUtils.testBit(__isset_bitfield, __FEE_ISSET_ID);
    }

    public void setFeeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((info.developerblog.services.auth.TAuthToken)value);
        }
        break;

      case HIPPO_COUNT:
        if (value == null) {
          unsetHippoCount();
        } else {
          setHippoCount((Integer)value);
        }
        break;

      case FEE:
        if (value == null) {
          unsetFee();
        } else {
          setFee((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case HIPPO_COUNT:
        return Integer.valueOf(getHippoCount());

      case FEE:
        return Integer.valueOf(getFee());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case HIPPO_COUNT:
        return isSetHippoCount();
      case FEE:
        return isSetFee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fink_args)
        return this.equals((fink_args)that);
      return false;
    }

    public boolean equals(fink_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_hippoCount = true;
      boolean that_present_hippoCount = true;
      if (this_present_hippoCount || that_present_hippoCount) {
        if (!(this_present_hippoCount && that_present_hippoCount))
          return false;
        if (this.hippoCount != that.hippoCount)
          return false;
      }

      boolean this_present_fee = true;
      boolean that_present_fee = true;
      if (this_present_fee || that_present_fee) {
        if (!(this_present_fee && that_present_fee))
          return false;
        if (this.fee != that.fee)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true && (isSetUser());
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_hippoCount = true;
      list.add(present_hippoCount);
      if (present_hippoCount)
        list.add(hippoCount);

      boolean present_fee = true;
      list.add(present_fee);
      if (present_fee)
        list.add(fee);

      return list.hashCode();
    }

    @Override
    public int compareTo(fink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHippoCount()).compareTo(other.isSetHippoCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHippoCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hippoCount, other.hippoCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fink_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hippoCount:");
      sb.append(this.hippoCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fee:");
      sb.append(this.fee);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (user == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'hippoCount' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'fee' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fink_argsStandardSchemeFactory implements SchemeFactory {
      public fink_argsStandardScheme getScheme() {
        return new fink_argsStandardScheme();
      }
    }

    private static class fink_argsStandardScheme extends StandardScheme<fink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new info.developerblog.services.auth.TAuthToken();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIPPO_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hippoCount = iprot.readI32();
                struct.setHippoCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fee = iprot.readI32();
                struct.setFeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetHippoCount()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'hippoCount' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetFee()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'fee' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HIPPO_COUNT_FIELD_DESC);
        oprot.writeI32(struct.hippoCount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FEE_FIELD_DESC);
        oprot.writeI32(struct.fee);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fink_argsTupleSchemeFactory implements SchemeFactory {
      public fink_argsTupleScheme getScheme() {
        return new fink_argsTupleScheme();
      }
    }

    private static class fink_argsTupleScheme extends TupleScheme<fink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.user.write(oprot);
        oprot.writeI32(struct.hippoCount);
        oprot.writeI32(struct.fee);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.user = new info.developerblog.services.auth.TAuthToken();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
        struct.hippoCount = iprot.readI32();
        struct.setHippoCountIsSet(true);
        struct.fee = iprot.readI32();
        struct.setFeeIsSet(true);
      }
    }

  }

  public static class fink_result implements org.apache.thrift.TBase<fink_result, fink_result._Fields>, java.io.Serializable, Cloneable, Comparable<fink_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)99);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fink_resultTupleSchemeFactory());
    }

    private TFbiResponse success; // required
    private info.developerblog.services.auth.TUnauthorizedException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)99, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 99: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFbiResponse.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fink_result.class, metaDataMap);
    }

    public fink_result() {
    }

    public fink_result(
      TFbiResponse success,
      info.developerblog.services.auth.TUnauthorizedException ue)
    {
      this();
      this.success = success;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fink_result(fink_result other) {
      if (other.isSetSuccess()) {
        this.success = new TFbiResponse(other.success);
      }
      if (other.isSetUe()) {
        this.ue = new info.developerblog.services.auth.TUnauthorizedException(other.ue);
      }
    }

    public fink_result deepCopy() {
      return new fink_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
    }

    public TFbiResponse getSuccess() {
      return this.success;
    }

    public fink_result setSuccess(TFbiResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public info.developerblog.services.auth.TUnauthorizedException getUe() {
      return this.ue;
    }

    public fink_result setUe(info.developerblog.services.auth.TUnauthorizedException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TFbiResponse)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((info.developerblog.services.auth.TUnauthorizedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fink_result)
        return this.equals((fink_result)that);
      return false;
    }

    public boolean equals(fink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ue = true && (isSetUe());
      list.add(present_ue);
      if (present_ue)
        list.add(ue);

      return list.hashCode();
    }

    @Override
    public int compareTo(fink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fink_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fink_resultStandardSchemeFactory implements SchemeFactory {
      public fink_resultStandardScheme getScheme() {
        return new fink_resultStandardScheme();
      }
    }

    private static class fink_resultStandardScheme extends StandardScheme<fink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TFbiResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 99: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new info.developerblog.services.auth.TUnauthorizedException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fink_resultTupleSchemeFactory implements SchemeFactory {
      public fink_resultTupleScheme getScheme() {
        return new fink_resultTupleScheme();
      }
    }

    private static class fink_resultTupleScheme extends TupleScheme<fink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TFbiResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new info.developerblog.services.auth.TUnauthorizedException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

}
